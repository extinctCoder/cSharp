#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankManagementSystem.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BankManagementSystem")]
	public partial class DBContexDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertstuff(stuff instance);
    partial void Updatestuff(stuff instance);
    partial void Deletestuff(stuff instance);
    partial void Inserttransaction(transaction instance);
    partial void Updatetransaction(transaction instance);
    partial void Deletetransaction(transaction instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    #endregion
		
		public DBContexDataContext() : 
				base(global::BankManagementSystem.Properties.Settings.Default.BankManagementSystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBContexDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContexDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContexDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContexDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<stuff> stuffs
		{
			get
			{
				return this.GetTable<stuff>();
			}
		}
		
		public System.Data.Linq.Table<transaction> transactions
		{
			get
			{
				return this.GetTable<transaction>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.stuff")]
	public partial class stuff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _salary;
		
		private int _rank;
		
		private EntitySet<transaction> _transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsalaryChanging(string value);
    partial void OnsalaryChanged();
    partial void OnrankChanging(int value);
    partial void OnrankChanged();
    #endregion
		
		public stuff()
		{
			this._transactions = new EntitySet<transaction>(new Action<transaction>(this.attach_transactions), new Action<transaction>(this.detach_transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_salary", DbType="NChar(10)")]
		public string salary
		{
			get
			{
				return this._salary;
			}
			set
			{
				if ((this._salary != value))
				{
					this.OnsalaryChanging(value);
					this.SendPropertyChanging();
					this._salary = value;
					this.SendPropertyChanged("salary");
					this.OnsalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rank", DbType="Int NOT NULL")]
		public int rank
		{
			get
			{
				return this._rank;
			}
			set
			{
				if ((this._rank != value))
				{
					this.OnrankChanging(value);
					this.SendPropertyChanging();
					this._rank = value;
					this.SendPropertyChanged("rank");
					this.OnrankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stuff_transaction", Storage="_transactions", ThisKey="id", OtherKey="stuffid")]
		public EntitySet<transaction> transactions
		{
			get
			{
				return this._transactions;
			}
			set
			{
				this._transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_transactions(transaction entity)
		{
			this.SendPropertyChanging();
			entity.stuff = this;
		}
		
		private void detach_transactions(transaction entity)
		{
			this.SendPropertyChanging();
			entity.stuff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[transaction]")]
	public partial class transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _useid;
		
		private System.Nullable<int> _stuffid;
		
		private System.Nullable<double> _amount;
		
		private EntityRef<stuff> _stuff;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuseidChanging(System.Nullable<int> value);
    partial void OnuseidChanged();
    partial void OnstuffidChanging(System.Nullable<int> value);
    partial void OnstuffidChanged();
    partial void OnamountChanging(System.Nullable<double> value);
    partial void OnamountChanged();
    #endregion
		
		public transaction()
		{
			this._stuff = default(EntityRef<stuff>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_useid", DbType="Int")]
		public System.Nullable<int> useid
		{
			get
			{
				return this._useid;
			}
			set
			{
				if ((this._useid != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseidChanging(value);
					this.SendPropertyChanging();
					this._useid = value;
					this.SendPropertyChanged("useid");
					this.OnuseidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stuffid", DbType="Int")]
		public System.Nullable<int> stuffid
		{
			get
			{
				return this._stuffid;
			}
			set
			{
				if ((this._stuffid != value))
				{
					if (this._stuff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstuffidChanging(value);
					this.SendPropertyChanging();
					this._stuffid = value;
					this.SendPropertyChanged("stuffid");
					this.OnstuffidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float")]
		public System.Nullable<double> amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="stuff_transaction", Storage="_stuff", ThisKey="stuffid", OtherKey="id", IsForeignKey=true)]
		public stuff stuff
		{
			get
			{
				return this._stuff.Entity;
			}
			set
			{
				stuff previousValue = this._stuff.Entity;
				if (((previousValue != value) 
							|| (this._stuff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._stuff.Entity = null;
						previousValue.transactions.Remove(this);
					}
					this._stuff.Entity = value;
					if ((value != null))
					{
						value.transactions.Add(this);
						this._stuffid = value.id;
					}
					else
					{
						this._stuffid = default(Nullable<int>);
					}
					this.SendPropertyChanged("stuff");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_transaction", Storage="_user", ThisKey="useid", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.transactions.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.transactions.Add(this);
						this._useid = value.id;
					}
					else
					{
						this._useid = default(Nullable<int>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _firstname;
		
		private string _middlename;
		
		private string _lastname;
		
		private string _presentaddress;
		
		private string _permanentaddress;
		
		private string _postalcode;
		
		private string _contactnumber;
		
		private string _nomineename;
		
		private string _nationality;
		
		private double _amount;
		
		private System.Nullable<int> _gender;
		
		private EntitySet<transaction> _transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnmiddlenameChanging(string value);
    partial void OnmiddlenameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void OnpresentaddressChanging(string value);
    partial void OnpresentaddressChanged();
    partial void OnpermanentaddressChanging(string value);
    partial void OnpermanentaddressChanged();
    partial void OnpostalcodeChanging(string value);
    partial void OnpostalcodeChanged();
    partial void OncontactnumberChanging(string value);
    partial void OncontactnumberChanged();
    partial void OnnomineenameChanging(string value);
    partial void OnnomineenameChanged();
    partial void OnnationalityChanging(string value);
    partial void OnnationalityChanged();
    partial void OnamountChanging(double value);
    partial void OnamountChanged();
    partial void OngenderChanging(System.Nullable<int> value);
    partial void OngenderChanged();
    #endregion
		
		public user()
		{
			this._transactions = new EntitySet<transaction>(new Action<transaction>(this.attach_transactions), new Action<transaction>(this.detach_transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="VarChar(50)")]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_middlename", DbType="VarChar(50)")]
		public string middlename
		{
			get
			{
				return this._middlename;
			}
			set
			{
				if ((this._middlename != value))
				{
					this.OnmiddlenameChanging(value);
					this.SendPropertyChanging();
					this._middlename = value;
					this.SendPropertyChanged("middlename");
					this.OnmiddlenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="VarChar(50)")]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_presentaddress", DbType="VarChar(50)")]
		public string presentaddress
		{
			get
			{
				return this._presentaddress;
			}
			set
			{
				if ((this._presentaddress != value))
				{
					this.OnpresentaddressChanging(value);
					this.SendPropertyChanging();
					this._presentaddress = value;
					this.SendPropertyChanged("presentaddress");
					this.OnpresentaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_permanentaddress", DbType="VarChar(50)")]
		public string permanentaddress
		{
			get
			{
				return this._permanentaddress;
			}
			set
			{
				if ((this._permanentaddress != value))
				{
					this.OnpermanentaddressChanging(value);
					this.SendPropertyChanging();
					this._permanentaddress = value;
					this.SendPropertyChanged("permanentaddress");
					this.OnpermanentaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_postalcode", DbType="VarChar(50)")]
		public string postalcode
		{
			get
			{
				return this._postalcode;
			}
			set
			{
				if ((this._postalcode != value))
				{
					this.OnpostalcodeChanging(value);
					this.SendPropertyChanging();
					this._postalcode = value;
					this.SendPropertyChanged("postalcode");
					this.OnpostalcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactnumber", DbType="VarChar(50)")]
		public string contactnumber
		{
			get
			{
				return this._contactnumber;
			}
			set
			{
				if ((this._contactnumber != value))
				{
					this.OncontactnumberChanging(value);
					this.SendPropertyChanging();
					this._contactnumber = value;
					this.SendPropertyChanged("contactnumber");
					this.OncontactnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomineename", DbType="VarChar(50)")]
		public string nomineename
		{
			get
			{
				return this._nomineename;
			}
			set
			{
				if ((this._nomineename != value))
				{
					this.OnnomineenameChanging(value);
					this.SendPropertyChanging();
					this._nomineename = value;
					this.SendPropertyChanged("nomineename");
					this.OnnomineenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nationality", DbType="NChar(10)")]
		public string nationality
		{
			get
			{
				return this._nationality;
			}
			set
			{
				if ((this._nationality != value))
				{
					this.OnnationalityChanging(value);
					this.SendPropertyChanging();
					this._nationality = value;
					this.SendPropertyChanged("nationality");
					this.OnnationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Float NOT NULL")]
		public double amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="Int")]
		public System.Nullable<int> gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_transaction", Storage="_transactions", ThisKey="id", OtherKey="useid")]
		public EntitySet<transaction> transactions
		{
			get
			{
				return this._transactions;
			}
			set
			{
				this._transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_transactions(transaction entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_transactions(transaction entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
}
#pragma warning restore 1591
